name: Bingo Game CI/CD Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

env:
  NODE_VERSION: '18'
  APP_NAME: bingo-game

jobs:

  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Validate syntax
        run: node -c server.js

      - name: Run tests
        run: npm test

      - name: Check public folder
        run: |
          echo "Checking public folder..."
          if [ -d public ]; then
            echo "Contents:"; ls -la public/
            [ -f public/index.html ] && echo "✅ index.html found" || echo "⚠️ index.html missing"
            ls public/*.css >/dev/null 2>&1 && echo "✅ CSS found" || echo "⚠️ CSS missing"
            ls public/*.js >/dev/null 2>&1 && echo "✅ JS found" || echo "⚠️ JS missing"
          else
            echo "❌ public/ folder not found"
            exit 1
          fi

      - name: Create artifact
        run: |
          mkdir -p dist
          cp server.js dist/
          cp -r public dist/ 2>/dev/null || echo "No public to copy"
          cp package.json dist/
          echo "Built on $(date)" > dist/build-info.txt
          ls -la dist/

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: bingo-game-build
          path: dist/
          retention-days: 30

  security-check:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build-and-test

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'package-lock.json'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level high || echo "Security issues found – manual review needed"

  docker-build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Build and test Docker image
        run: |
          cat > Dockerfile << 'EOF'
          FROM node:18-alpine
          WORKDIR /app
          COPY package*.json ./
          RUN if [ ! -f package.json ]; then \
                echo '{"name":"Bingo","main":"server.js","scripts":{"start":"node server.js"},"dependencies":{"express":"^4.18.0","socket.io":"^4.7.0"}}' > package.json; \
              fi
          RUN npm ci
          COPY . .
          EXPOSE 3000
          HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
            CMD curl -f http://localhost:3000/health || exit 1
          CMD ["npm", "start"]
          EOF

          docker build -t ${{ env.APP_NAME }}:latest .
          docker run -d --name test-container -p 3001:3000 ${{ env.APP_NAME }}:latest
          sleep 10
          curl -f http://localhost:3001/ >/dev/null || echo "Server not reachable"
          docker stop test-container
          docker rm test-container

  deployment-check:
    name: Deployment Readiness
    runs-on: ubuntu-latest
    needs: [build-and-test, security-check]

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: bingo-game-build
          path: build-output/

      - name: Show readiness info
        run: |
          echo "=== Deployment Check ==="
          echo "Artifacts:"; ls -la build-output/
          echo "Your Bingo Game is build and security-tested. Ready for deployment!"
          echo "Next: Add deployment job with secrets to target environment."

  # Example deployment job (uncomment/setup as needed)
  # deploy:
  #   name: Deploy to <Your Platform>
  #   runs-on: ubuntu-latest
  #   needs: deployment-check
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4
  #     - name: Setup deployment tool
  #       run: echo "Set up deployment (e.g., Heroku, Railway, AWS CLI)"
  #     - name: Deploy
  #       run: echo "Deploying build-output to target environment"
  #       env:
  #         API_KEY: ${{ secrets.API_KEY }}
