name: CI/CD Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

env:
  NODE_VERSION: '18'
  APP_NAME: bingo-game

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: package-lock.json
      - run: npm ci
      - run: node -c server.js
      - run: npm test
      - run: |
          echo "Checking public folder..."
          if [ -d public ]; then
            ls -la public/
            ...
          else exit 1; fi
      - run: |
          mkdir -p dist
          cp server.js dist/
          cp -r public dist/ 2>/dev/null || echo "No public to copy"
          cp package.json dist/
          echo "Built on $(date)" > dist/build-info.txt
      - uses: actions/upload-artifact@v4
        with:
          name: bingo-game-build
          path: dist/
          retention-days: 30

  security-check:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build-and-test
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: package-lock.json
      - run: npm ci
      - run: npm audit --audit-level high || echo "Security issues found â€“ review needed"

  docker-build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      - run: |
          cat > Dockerfile << 'EOF'
          ... Dockerfile content ...
          EOF
          docker build -t ${{ env.APP_NAME }}:latest .
          docker run -d --name test-container -p 3001:3000 ${{ env.APP_NAME }}:latest
          sleep 10
          curl -f http://localhost:3001/ || echo "Server not responding"
          docker stop test-container && docker rm test-container

  deployment-check:
    name: Deployment Readiness
    runs-on: ubuntu-latest
    needs: [build-and-test, security-check]
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: bingo-game-build
          path: build-output/
      - run: |
          echo "=== Deployment Check ==="
          ls -la build-output/
          echo "Your Bingo Game is build and security-tested. Ready for deployment!"
