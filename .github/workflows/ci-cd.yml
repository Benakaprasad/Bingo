name: Enhanced CI/CD Pipeline

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch: # Allow manual triggers

env:
  NODE_VERSION: '18'
  APP_NAME: bingo-game
  REGISTRY: ghcr.io

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: package-lock.json
          
      - name: Install dependencies
        run: npm ci
        
      - name: Lint code
        run: npm run lint || echo "No lint script found"
        
      - name: Syntax check
        run: node -c server.js
        
      - name: Run tests with coverage
        run: |
          npm test -- --coverage || echo "Tests completed with issues"
          
      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        if: success()
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          
      - name: Verify public assets
        run: |
          echo "Checking public folder..."
          if [ -d public ]; then
            echo "‚úÖ Public folder exists"
            ls -la public/
            # Check for required files
            [ -f public/index.html ] && echo "‚úÖ index.html found" || echo "‚ö†Ô∏è index.html missing"
          else 
            echo "‚ùå Public folder missing"
            exit 1
          fi
          
      - name: Generate version
        id: version
        run: |
          if [ "${{ github.ref }}" == "refs/heads/main" ]; then
            VERSION="v$(date +%Y.%m.%d)-${GITHUB_SHA::7}"
          else
            VERSION="dev-${GITHUB_SHA::7}"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Generated version: $VERSION"
          
      - name: Build application
        run: |
          mkdir -p dist
          cp server.js dist/
          cp package.json dist/
          cp package-lock.json dist/
          
          # Copy public folder if it exists
          if [ -d public ]; then
            cp -r public dist/
            echo "‚úÖ Public assets copied"
          fi
          
          # Generate build metadata
          cat > dist/build-info.json << EOF
          {
            "version": "${{ steps.version.outputs.version }}",
            "buildTime": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "commit": "${{ github.sha }}",
            "branch": "${{ github.ref_name }}",
            "workflow": "${{ github.run_id }}"
          }
          EOF
          
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: bingo-game-build-${{ steps.version.outputs.version }}
          path: dist/
          retention-days: 30

  security-scan:
    name: Security Analysis
    runs-on: ubuntu-latest
    needs: build-and-test
    permissions:
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: package-lock.json
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run npm audit
        run: |
          echo "üîç Running security audit..."
          npm audit --audit-level moderate --json > audit-results.json || true
          
          # Check for high/critical vulnerabilities
          HIGH_VULNS=$(cat audit-results.json | jq '.metadata.vulnerabilities.high // 0')
          CRITICAL_VULNS=$(cat audit-results.json | jq '.metadata.vulnerabilities.critical // 0')
          
          echo "High vulnerabilities: $HIGH_VULNS"
          echo "Critical vulnerabilities: $CRITICAL_VULNS"
          
          if [ "$CRITICAL_VULNS" -gt 0 ]; then
            echo "‚ùå Critical vulnerabilities found - blocking deployment"
            exit 1
          elif [ "$HIGH_VULNS" -gt 0 ]; then
            echo "‚ö†Ô∏è High vulnerabilities found - review required"
            npm audit --audit-level high
          else
            echo "‚úÖ No critical/high vulnerabilities found"
          fi
          
      - name: Upload audit results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-audit-${{ needs.build-and-test.outputs.version }}
          path: audit-results.json

  docker-build:
    name: Build & Test Container
    runs-on: ubuntu-latest
    needs: [build-and-test, security-scan]
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: bingo-game-build-${{ needs.build-and-test.outputs.version }}
          path: dist/
          
      - name: Create optimized Dockerfile
        run: |
          cat > Dockerfile << 'EOF'
          FROM node:18-alpine AS base
          WORKDIR /app
          
          # Security: Create non-root user
          RUN addgroup -g 1001 -S nodejs && \
              adduser -S nodejs -u 1001
          
          # Install dependencies in separate layer for better caching
          COPY dist/package*.json ./
          RUN npm ci --only=production && \
              npm cache clean --force
          
          # Copy application files
          COPY dist/ ./
          
          # Set ownership and switch to non-root user
          RUN chown -R nodejs:nodejs /app
          USER nodejs
          
          # Health check
          HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
            CMD curl -f http://localhost:3000/health || exit 1
          
          EXPOSE 3000
          CMD ["node", "server.js"]
          EOF
          
      - name: Build Docker image
        run: |
          IMAGE_TAG="${{ env.REGISTRY }}/${{ github.repository }}/${{ env.APP_NAME }}:${{ needs.build-and-test.outputs.version }}"
          echo "Building image: $IMAGE_TAG"
          
          docker build -t "$IMAGE_TAG" -t "${{ env.REGISTRY }}/${{ github.repository }}/${{ env.APP_NAME }}:latest" .
          
      - name: Test container
        run: |
          IMAGE_TAG="${{ env.REGISTRY }}/${{ github.repository }}/${{ env.APP_NAME }}:${{ needs.build-and-test.outputs.version }}"
          
          echo "üß™ Testing container..."
          docker run -d --name test-container -p 3001:3000 "$IMAGE_TAG"
          
          # Wait for container to start
          for i in {1..30}; do
            if curl -f http://localhost:3001/ >/dev/null 2>&1; then
              echo "‚úÖ Container is responding"
              break
            fi
            echo "Waiting for container... ($i/30)"
            sleep 2
          done
          
          # Test health endpoint if available
          curl -f http://localhost:3001/health || echo "‚ö†Ô∏è Health endpoint not available"
          
          # Cleanup
          docker stop test-container && docker rm test-container
          
      - name: Log in to Container Registry
        if: github.ref == 'refs/heads/main'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Push to registry
        if: github.ref == 'refs/heads/main'
        run: |
          IMAGE_TAG="${{ env.REGISTRY }}/${{ github.repository }}/${{ env.APP_NAME }}:${{ needs.build-and-test.outputs.version }}"
          LATEST_TAG="${{ env.REGISTRY }}/${{ github.repository }}/${{ env.APP_NAME }}:latest"
          
          echo "üöÄ Pushing images..."
          docker push "$IMAGE_TAG"
          docker push "$LATEST_TAG"
          
          echo "‚úÖ Images pushed successfully"

  deployment-readiness:
    name: Deployment Readiness Check
    runs-on: ubuntu-latest
    needs: [build-and-test, security-scan, docker-build]
    if: always()
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: bingo-game-build-${{ needs.build-and-test.outputs.version }}
          path: build-output/
          
      - name: Final deployment check
        run: |
          echo "üéØ === DEPLOYMENT READINESS REPORT ==="
          echo "Version: ${{ needs.build-and-test.outputs.version }}"
          echo "Commit: ${{ github.sha }}"
          echo "Branch: ${{ github.ref_name }}"
          echo ""
          
          echo "üì¶ Build Artifacts:"
          ls -la build-output/
          echo ""
          
          echo "üîç Job Status Summary:"
          echo "  Build & Test: ${{ needs.build-and-test.result }}"
          echo "  Security Scan: ${{ needs.security-scan.result }}"
          echo "  Docker Build: ${{ needs.docker-build.result }}"
          echo ""
          
          # Determine deployment readiness
          if [[ "${{ needs.build-and-test.result }}" == "success" && 
                "${{ needs.security-scan.result }}" == "success" ]]; then
            if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
              if [[ "${{ needs.docker-build.result }}" == "success" ]]; then
                echo "üéâ READY FOR PRODUCTION DEPLOYMENT!"
                echo "Docker image: ${{ env.REGISTRY }}/${{ github.repository }}/${{ env.APP_NAME }}:${{ needs.build-and-test.outputs.version }}"
              else
                echo "‚ö†Ô∏è BUILD READY - Docker build failed, manual review required"
              fi
            else
              echo "‚úÖ BUILD READY - Feature branch validated"
            fi
          else
            echo "‚ùå NOT READY - Build or security issues detected"
            exit 1
          fi
          
      - name: Create deployment summary
        if: github.ref == 'refs/heads/main' && needs.docker-build.result == 'success'
        run: |
          cat > deployment-summary.md << EOF
          # üéÆ Bingo Game Deployment Summary
          
          **Version:** \`${{ needs.build-and-test.outputs.version }}\`  
          **Status:** ‚úÖ Ready for deployment  
          **Docker Image:** \`${{ env.REGISTRY }}/${{ github.repository }}/${{ env.APP_NAME }}:${{ needs.build-and-test.outputs.version }}\`
          
          ## Quick Deploy Commands
          \`\`\`bash
          # Pull and run the latest image
          docker pull ${{ env.REGISTRY }}/${{ github.repository }}/${{ env.APP_NAME }}:${{ needs.build-and-test.outputs.version }}
          docker run -p 3000:3000 ${{ env.REGISTRY }}/${{ github.repository }}/${{ env.APP_NAME }}:${{ needs.build-and-test.outputs.version }}
          \`\`\`
          
          ## Build Metadata
          - **Commit:** ${{ github.sha }}
          - **Branch:** ${{ github.ref_name }}
          - **Workflow:** [${{ github.run_id }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
          EOF
          
          echo "Deployment summary created ‚úÖ"
          
      - name: Upload deployment summary
        if: github.ref == 'refs/heads/main'
        uses: actions/upload-artifact@v4
        with:
          name: deployment-summary-${{ needs.build-and-test.outputs.version }}
          path: deployment-summary.md
